// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: application.proto

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		application.proto
		common.proto
		config.proto
		consensus.proto

	It has these top-level messages:
		AppMessage
		AppMessageHeader
		AppMetadata
		Version
		AppVersion
		Empty
		BlockHeader
		BlockTxs
		Block
		Transaction
		GenesisTxProposal
		AppConfig
		ConsensusBlockConfig
		TxResponseSync
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AppMessageType
type AppMessageType int32

const (
	UNKNOWN AppMessageType = 0
)

var AppMessageType_name = map[int32]string{
	0: "UNKNOWN",
}
var AppMessageType_value = map[string]int32{
	"UNKNOWN": 0,
}

func (AppMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApplication, []int{0} }

// AppMessage
type AppMessage struct {
	Header  *AppMessageHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Payload []byte            `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *AppMessage) Reset()                    { *m = AppMessage{} }
func (*AppMessage) ProtoMessage()               {}
func (*AppMessage) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{0} }

func (m *AppMessage) GetHeader() *AppMessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AppMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// AppMessageHeader
type AppMessageHeader struct {
	Meta      *AppMetadata   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Timestamp int64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      AppMessageType `protobuf:"varint,3,opt,name=type,proto3,enum=types.AppMessageType" json:"type,omitempty"`
}

func (m *AppMessageHeader) Reset()                    { *m = AppMessageHeader{} }
func (*AppMessageHeader) ProtoMessage()               {}
func (*AppMessageHeader) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{1} }

func (m *AppMessageHeader) GetMeta() *AppMetadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AppMessageHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AppMessageHeader) GetType() AppMessageType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN
}

// AppMetadata
type AppMetadata struct {
	Name    string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version *AppVersion `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *AppMetadata) Reset()                    { *m = AppMetadata{} }
func (*AppMetadata) ProtoMessage()               {}
func (*AppMetadata) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{2} }

func (m *AppMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppMetadata) GetVersion() *AppVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Version
type Version struct {
	Major string `protobuf:"bytes,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor string `protobuf:"bytes,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Build string `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{3} }

func (m *Version) GetMajor() string {
	if m != nil {
		return m.Major
	}
	return ""
}

func (m *Version) GetMinor() string {
	if m != nil {
		return m.Minor
	}
	return ""
}

func (m *Version) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

// Application version
// Features:
// 1. upgrade version value must larger than current version
// 2. newest application can compatible a specific version of application,
//    older version than Backwards shouldn't be used in the blockchain network.
type AppVersion struct {
	Version   *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Backwards *Version `protobuf:"bytes,2,opt,name=backwards" json:"backwards,omitempty"`
}

func (m *AppVersion) Reset()                    { *m = AppVersion{} }
func (*AppVersion) ProtoMessage()               {}
func (*AppVersion) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{4} }

func (m *AppVersion) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *AppVersion) GetBackwards() *Version {
	if m != nil {
		return m.Backwards
	}
	return nil
}

func init() {
	proto.RegisterType((*AppMessage)(nil), "types.AppMessage")
	proto.RegisterType((*AppMessageHeader)(nil), "types.AppMessageHeader")
	proto.RegisterType((*AppMetadata)(nil), "types.AppMetadata")
	proto.RegisterType((*Version)(nil), "types.Version")
	proto.RegisterType((*AppVersion)(nil), "types.AppVersion")
	proto.RegisterEnum("types.AppMessageType", AppMessageType_name, AppMessageType_value)
}
func (x AppMessageType) String() string {
	s, ok := AppMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AppMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppMessage)
	if !ok {
		that2, ok := that.(AppMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *AppMessageHeader) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppMessageHeader)
	if !ok {
		that2, ok := that.(AppMessageHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *AppMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppMetadata)
	if !ok {
		that2, ok := that.(AppMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	return true
}
func (this *Version) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Version)
	if !ok {
		that2, ok := that.(Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Build != that1.Build {
		return false
	}
	return true
}
func (this *AppVersion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AppVersion)
	if !ok {
		that2, ok := that.(AppVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.Backwards.Equal(that1.Backwards) {
		return false
	}
	return true
}
func (this *AppMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.AppMessage{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppMessageHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.AppMessageHeader{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.AppMetadata{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Version{")
	s = append(s, "Major: "+fmt.Sprintf("%#v", this.Major)+",\n")
	s = append(s, "Minor: "+fmt.Sprintf("%#v", this.Minor)+",\n")
	s = append(s, "Build: "+fmt.Sprintf("%#v", this.Build)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.AppVersion{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.Backwards != nil {
		s = append(s, "Backwards: "+fmt.Sprintf("%#v", this.Backwards)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApplication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Application service

type ApplicationClient interface {
	// Register is used to register application to consensus module
	Register(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// AppStream used for sending and receiving messages between application & consensus module
	AppStream(ctx context.Context, opts ...grpc.CallOption) (Application_AppStreamClient, error)
}

type applicationClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClient(cc *grpc.ClientConn) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Register(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/types.Application/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) AppStream(ctx context.Context, opts ...grpc.CallOption) (Application_AppStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Application_serviceDesc.Streams[0], c.cc, "/types.Application/AppStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationAppStreamClient{stream}
	return x, nil
}

type Application_AppStreamClient interface {
	Send(*AppMessage) error
	Recv() (*AppMessage, error)
	grpc.ClientStream
}

type applicationAppStreamClient struct {
	grpc.ClientStream
}

func (x *applicationAppStreamClient) Send(m *AppMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationAppStreamClient) Recv() (*AppMessage, error) {
	m := new(AppMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Application service

type ApplicationServer interface {
	// Register is used to register application to consensus module
	Register(context.Context, *Empty) (*Empty, error)
	// AppStream used for sending and receiving messages between application & consensus module
	AppStream(Application_AppStreamServer) error
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

func _Application_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Application/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Register(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_AppStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationServer).AppStream(&applicationAppStreamServer{stream})
}

type Application_AppStreamServer interface {
	Send(*AppMessage) error
	Recv() (*AppMessage, error)
	grpc.ServerStream
}

type applicationAppStreamServer struct {
	grpc.ServerStream
}

func (x *applicationAppStreamServer) Send(m *AppMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationAppStreamServer) Recv() (*AppMessage, error) {
	m := new(AppMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Application_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppStream",
			Handler:       _Application_AppStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "application.proto",
}

func (m *AppMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *AppMessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMessageHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Timestamp))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *AppMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Version != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Version.Size()))
		n3, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Major) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Major)))
		i += copy(dAtA[i:], m.Major)
	}
	if len(m.Minor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Minor)))
		i += copy(dAtA[i:], m.Minor)
	}
	if len(m.Build) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Build)))
		i += copy(dAtA[i:], m.Build)
	}
	return i, nil
}

func (m *AppVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Version.Size()))
		n4, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Backwards != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplication(dAtA, i, uint64(m.Backwards.Size()))
		n5, err := m.Backwards.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Application(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Application(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApplication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppMessage) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *AppMessageHeader) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovApplication(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovApplication(uint64(m.Type))
	}
	return n
}

func (m *AppMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.Major)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Minor)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Build)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func (m *AppVersion) Size() (n int) {
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Backwards != nil {
		l = m.Backwards.Size()
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppMessage{`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "AppMessageHeader", "AppMessageHeader", 1) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppMessageHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppMessageHeader{`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "AppMetadata", "AppMetadata", 1) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppMetadata{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "AppVersion", "AppVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Version) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Version{`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`Minor:` + fmt.Sprintf("%v", this.Minor) + `,`,
		`Build:` + fmt.Sprintf("%v", this.Build) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppVersion{`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "Version", "Version", 1) + `,`,
		`Backwards:` + strings.Replace(fmt.Sprintf("%v", this.Backwards), "Version", "Version", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AppMessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &AppMetadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AppMessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &AppVersion{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Major = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Build = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Backwards == nil {
				m.Backwards = &Version{}
			}
			if err := m.Backwards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("application.proto", fileDescriptorApplication) }

var fileDescriptorApplication = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xa7, 0xdd, 0xec, 0xc6, 0xa9, 0x84, 0xb0, 0x29, 0x14, 0x43, 0xd0, 0x26, 0x8c, 0x20,
	0xe3, 0x1f, 0x12, 0x89, 0x07, 0xcf, 0x2b, 0x08, 0xc2, 0x62, 0xc4, 0xf1, 0xcf, 0x82, 0xb7, 0xca,
	0x4c, 0x93, 0xb4, 0xa6, 0xa7, 0x9b, 0x99, 0x5e, 0x25, 0x9e, 0x04, 0x5f, 0xc0, 0xc7, 0xf0, 0x51,
	0x3c, 0xee, 0xd1, 0xa3, 0x19, 0x2f, 0x1e, 0xf7, 0x11, 0x24, 0x9d, 0x19, 0x66, 0x93, 0xdc, 0xa6,
	0xbe, 0xfa, 0xea, 0x57, 0x1f, 0x35, 0x0d, 0x5d, 0x32, 0x66, 0x21, 0x63, 0xb2, 0x52, 0xa7, 0x43,
	0x93, 0x69, 0xab, 0xf1, 0xd0, 0x2e, 0x8d, 0xc8, 0xfb, 0xed, 0x58, 0x2b, 0x55, 0x89, 0xc1, 0x19,
	0xc0, 0x89, 0x31, 0x2f, 0x45, 0x9e, 0xd3, 0x4c, 0xe0, 0x08, 0x8e, 0xe6, 0x82, 0x12, 0x91, 0xf5,
	0xd8, 0x80, 0x85, 0xad, 0xf1, 0xad, 0xa1, 0x9b, 0x19, 0xd6, 0x96, 0x17, 0xae, 0x1d, 0x95, 0x36,
	0xec, 0x41, 0xd3, 0xd0, 0x72, 0xa1, 0x29, 0xe9, 0x5d, 0x1b, 0xb0, 0xb0, 0x1d, 0x55, 0x65, 0xf0,
	0x9d, 0xc1, 0xf1, 0xee, 0x18, 0xde, 0x83, 0x86, 0x12, 0x96, 0x4a, 0x3a, 0x5e, 0xa5, 0x5b, 0x4a,
	0xc8, 0x52, 0xe4, 0xfa, 0x78, 0x1b, 0x7c, 0x2b, 0x95, 0xc8, 0x2d, 0x29, 0xe3, 0xc0, 0x07, 0x51,
	0x2d, 0xe0, 0x7d, 0x68, 0xac, 0x07, 0x7b, 0x07, 0x03, 0x16, 0x76, 0xc6, 0x37, 0xf7, 0x32, 0xbe,
	0x5d, 0x1a, 0x11, 0x39, 0x4b, 0x30, 0x81, 0xd6, 0x15, 0x3a, 0x22, 0x34, 0x52, 0x52, 0xc2, 0xed,
	0xf7, 0x23, 0xf7, 0x8d, 0x0f, 0xa1, 0xf9, 0x59, 0x64, 0xb9, 0xd4, 0xa9, 0xdb, 0xd4, 0x1a, 0x77,
	0x6b, 0xe0, 0xfb, 0x4d, 0x23, 0xaa, 0x1c, 0xc1, 0x29, 0x34, 0x4b, 0x0d, 0x6f, 0xc0, 0xa1, 0xa2,
	0x8f, 0x3a, 0x2b, 0x61, 0x9b, 0xc2, 0xa9, 0x32, 0xd5, 0x99, 0x63, 0xad, 0xd5, 0x75, 0xb1, 0x56,
	0xa7, 0xe7, 0x72, 0x91, 0xb8, 0xc8, 0x7e, 0xb4, 0x29, 0x82, 0xc4, 0xdd, 0xbe, 0xe2, 0x85, 0x75,
	0x8e, 0xcd, 0x79, 0x3a, 0x65, 0x8e, 0xdd, 0x10, 0xf8, 0x08, 0xfc, 0x29, 0xc5, 0x9f, 0xbe, 0x50,
	0x96, 0xe4, 0x65, 0xe6, 0x5d, 0x6f, 0x6d, 0x78, 0x70, 0x07, 0x3a, 0xdb, 0xa7, 0xc1, 0x16, 0x34,
	0xdf, 0x4d, 0x4e, 0x27, 0xaf, 0xce, 0x26, 0xc7, 0xde, 0xd8, 0xb8, 0x0b, 0x55, 0x4f, 0x05, 0x43,
	0xb8, 0x1e, 0x89, 0x99, 0xcc, 0xad, 0xc8, 0xb0, 0x5d, 0x42, 0x9f, 0x2b, 0x63, 0x97, 0xfd, 0xad,
	0x2a, 0xf0, 0xf0, 0x29, 0xf8, 0x27, 0xc6, 0xbc, 0xb1, 0x99, 0x20, 0x85, 0xdd, 0xbd, 0x9f, 0xd0,
	0xdf, 0x97, 0x02, 0x2f, 0x64, 0x8f, 0xd9, 0xb3, 0xd7, 0x17, 0x2b, 0xee, 0xfd, 0x5e, 0x71, 0xef,
	0x72, 0xc5, 0xd9, 0xb7, 0x82, 0xb3, 0x9f, 0x05, 0x67, 0xbf, 0x0a, 0xce, 0x2e, 0x0a, 0xce, 0xfe,
	0x14, 0x9c, 0xfd, 0x2b, 0xb8, 0x77, 0x59, 0x70, 0xf6, 0xe3, 0x2f, 0xf7, 0x3e, 0xdc, 0x9d, 0x49,
	0x3b, 0x3f, 0x9f, 0x0e, 0x63, 0xad, 0x46, 0x4a, 0xa6, 0xf6, 0xeb, 0x9c, 0xf4, 0xc8, 0x6a, 0x43,
	0xf1, 0x9c, 0x64, 0x3a, 0x72, 0x3b, 0xa6, 0x47, 0xee, 0x31, 0x3f, 0xf9, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xb2, 0xaa, 0xde, 0x6e, 0xf6, 0x02, 0x00, 0x00,
}
